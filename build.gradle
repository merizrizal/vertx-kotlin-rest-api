buildscript {
    ext.kotlin_version = '1.8.0'
    ext.vertx_version = '4.4.0'
    ext.zipkin_version = '5.15.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    group = 'com.merizrizal'
    version = '1.0.0'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'java'
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'

    // Vertx Core
    implementation "io.vertx:vertx-core:$vertx_version"
    implementation "io.vertx:vertx-lang-kotlin:$vertx_version"

    // Vertx Codegen and Proxy
//    implementation "io.vertx:vertx-service-proxy:$vertx_version"
    annotationProcessor "io.vertx:vertx-codegen:$vertx_version:processor"
//    annotationProcessor "io.vertx:vertx-service-proxy:$vertx_version"

    // Vertx Web
    implementation "io.vertx:vertx-web:$vertx_version"

    // Vertx Rxjava
    implementation "io.vertx:vertx-rx-java3:$vertx_version"
    implementation "io.vertx:vertx-rx-java3-gen:$vertx_version"

    // Zipkin
    implementation "io.zipkin.brave:brave:$zipkin_version"
    implementation "io.zipkin.brave:brave-instrumentation-http:$zipkin_version"
}

sourceSets {
    main {
        java {
            srcDirs += ["build/generated/source/java"]
        }
    }
}

task annotationProcessing(type: JavaCompile) {
    group = "other"
    description = "Generate vertx codegen"
    source = sourceSets.main.java
    configurations.implementation.setCanBeResolved(true)
    options.annotationProcessorPath = configurations.annotationProcessor
    classpath = configurations.implementation
    options.debugOptions.debugLevel = "source,lines,vars"
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-Acodegen.output=${projectDir}/src/main"
    ]
    destinationDirectory = layout.buildDirectory.dir("${buildDir}/generated/source/java")
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': archiveVersion
        attributes 'Main-Class': 'AppKt'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task cleanAndJar {
    group = 'build'
    description = 'Clean and create jar'

    dependsOn clean
    dependsOn jar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

compileJava {
    dependsOn annotationProcessing
}
